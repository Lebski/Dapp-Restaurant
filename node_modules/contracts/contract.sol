pragma solidity ^0.4.17;

/**
 * @title Drinks, the one and only Bar-DApp
 * @dev Version of the Drinks-Contract for the "IT-Management" project
 */
contract Drinks {

    address public owner;
    mapping(uint => mapping (uint => uint)) public orders;
    mapping(uint => uint) public prices;

    event EmptyPay(address _sener, uint _amount);

    /**
    * @dev Set msg.sender as owner
    * @dev Set prices for drinks in ether
    */
    function Drinks() public {
        owner = msg.sender;
        prices[0] = 0.7 ether;
        prices[1] = 0.5 ether;
        prices[2] = 0.3 ether;
        prices[3] = 0.1 ether;
    }

    /**
    * @dev Token-transfer from msg.sender to address
    * @notice Please call the calcPrice-Function first, and send the right Amount of Ether
    * @notice Contrac't will be reverted otherwise
    * @param _drinks provide array of listed drinks
    * @param _amounts array of ordered amounts
    */
    function takeOrder(uint _table, uint[] _drinks, uint[] _amounts) public payable {
        uint price = calcPrice(_drinks, _amounts);
        require (msg.value >= price);
        for (uint i = 0; i < _drinks.length; i++){
            orders[_table][_drinks[i]] += _amounts[i];
        }
    }

    /**
   * @dev Calculates the correct price of Drinks ordered
   * @notice Please call the calcPrice-Function first, and send the right Amount of Ether
   * @notice Contrac't will be reverted otherwise
   * @param _drinks provide array of listed drinks
   * @param _amounts array of ordered amounts
   * @return uint, price of coctails in Ether
   */
    function calcPrice(uint[] _drinks, uint[] _amounts) public view returns (uint) {
        uint price;
        for (uint i = 0; i < _drinks.length; i++){
            price += _amounts[i]* prices[_drinks[i]];
        }
        return price;
    }

    /**
    * @dev Returns the correct amount of coctails ordered from specific address
    * @param _table id of table
    * @param _drinkId id of requested drink
    * @return uint, amount of drinks
    */
    function getOrder(uint _table, uint _drinkId) public view returns (uint){
        return orders[_table][_drinkId];
    }

    /**
    * @dev Removes ordered cotails from list
    * @notice Please don't call this contract if you arent the restaurant owner
    * @param _drinks provide array of served drinks
    * @param _amounts array of served amounts
    */
    function serve(uint _table, uint[] _drinks, uint[] _amounts) public {
        require(msg.sender == owner);
        for (uint i = 0; i < _drinks.length; i++){
            orders[_table][_drinks[i]] -= _amounts[i];
        }
    }

    /**
     * @notice Fallback. Don't ever call this function. Thanks.
    */
    function() public payable { EmptyPay(msg.sender, msg.value); }

} 
